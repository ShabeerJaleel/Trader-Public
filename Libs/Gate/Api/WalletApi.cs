/*
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading.Tasks;
using Io.Gate.GateApi.Client;
using Io.Gate.GateApi.Model;

namespace Io.Gate.GateApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Generate currency deposit address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>DepositAddress</returns>
        DepositAddress GetDepositAddress (string currency);

        /// <summary>
        /// Generate currency deposit address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>ApiResponse of DepositAddress</returns>
        ApiResponse<DepositAddress> GetDepositAddressWithHttpInfo (string currency);
        /// <summary>
        /// Retrieve withdrawal records
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>List&lt;LedgerRecord&gt;</returns>
        List<LedgerRecord> ListWithdrawals (string currency = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Retrieve withdrawal records
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;LedgerRecord&gt;</returns>
        ApiResponse<List<LedgerRecord>> ListWithdrawalsWithHttpInfo (string currency = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Retrieve deposit records
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>List&lt;LedgerRecord&gt;</returns>
        List<LedgerRecord> ListDeposits (string currency = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Retrieve deposit records
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;LedgerRecord&gt;</returns>
        ApiResponse<List<LedgerRecord>> ListDepositsWithHttpInfo (string currency = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Transfer between trading accounts
        /// </summary>
        /// <remarks>
        /// Transfer between different accounts. Currently support transfers between the following:  1. spot - margin 2. spot - futures(perpetual) 3. spot - delivery 4. spot - cross margin
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transfer"></param>
        /// <returns></returns>
        void Transfer (Transfer transfer);

        /// <summary>
        /// Transfer between trading accounts
        /// </summary>
        /// <remarks>
        /// Transfer between different accounts. Currently support transfers between the following:  1. spot - margin 2. spot - futures(perpetual) 3. spot - delivery 4. spot - cross margin
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transfer"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TransferWithHttpInfo (Transfer transfer);
        /// <summary>
        /// Retrieve transfer records between main and sub accounts
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days  &gt; Note: only records after 2020-04-10 can be retrieved
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">Sub account user ID. Return records related to all sub accounts if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>List&lt;SubAccountTransfer&gt;</returns>
        List<SubAccountTransfer> ListSubAccountTransfers (string subUid = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Retrieve transfer records between main and sub accounts
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days  &gt; Note: only records after 2020-04-10 can be retrieved
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">Sub account user ID. Return records related to all sub accounts if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;SubAccountTransfer&gt;</returns>
        ApiResponse<List<SubAccountTransfer>> ListSubAccountTransfersWithHttpInfo (string subUid = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Transfer between main and sub accounts
        /// </summary>
        /// <remarks>
        /// Support transferring with sub user&#39;s spot or futures account. Note that only main user&#39;s spot account is used no matter which sub user&#39;s account is operated.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountTransfer"></param>
        /// <returns></returns>
        void TransferWithSubAccount (SubAccountTransfer subAccountTransfer);

        /// <summary>
        /// Transfer between main and sub accounts
        /// </summary>
        /// <remarks>
        /// Support transferring with sub user&#39;s spot or futures account. Note that only main user&#39;s spot account is used no matter which sub user&#39;s account is operated.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountTransfer"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TransferWithSubAccountWithHttpInfo (SubAccountTransfer subAccountTransfer);
        /// <summary>
        /// Retrieve withdrawal status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>List&lt;WithdrawStatus&gt;</returns>
        List<WithdrawStatus> ListWithdrawStatus (string currency = default(string));

        /// <summary>
        /// Retrieve withdrawal status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>ApiResponse of List&lt;WithdrawStatus&gt;</returns>
        ApiResponse<List<WithdrawStatus>> ListWithdrawStatusWithHttpInfo (string currency = default(string));
        /// <summary>
        /// Retrieve sub account balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">Sub account user ID. Return records related to all sub accounts if not specified (optional)</param>
        /// <returns>List&lt;SubAccountBalance&gt;</returns>
        List<SubAccountBalance> ListSubAccountBalances (string subUid = default(string));

        /// <summary>
        /// Retrieve sub account balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">Sub account user ID. Return records related to all sub accounts if not specified (optional)</param>
        /// <returns>ApiResponse of List&lt;SubAccountBalance&gt;</returns>
        ApiResponse<List<SubAccountBalance>> ListSubAccountBalancesWithHttpInfo (string subUid = default(string));
        /// <summary>
        /// Retrieve personal trading fee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <returns>TradeFee</returns>
        TradeFee GetTradeFee (string currencyPair = default(string));

        /// <summary>
        /// Retrieve personal trading fee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <returns>ApiResponse of TradeFee</returns>
        ApiResponse<TradeFee> GetTradeFeeWithHttpInfo (string currencyPair = default(string));
        /// <summary>
        /// Retrieve user&#39;s total balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency unit used to calculate the balance amount. BTC, CNY, USD and USDT are allowed. USDT is the default. (optional, default to &quot;USDT&quot;)</param>
        /// <returns>TotalBalance</returns>
        TotalBalance GetTotalBalance (string currency = default(string));

        /// <summary>
        /// Retrieve user&#39;s total balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency unit used to calculate the balance amount. BTC, CNY, USD and USDT are allowed. USDT is the default. (optional, default to &quot;USDT&quot;)</param>
        /// <returns>ApiResponse of TotalBalance</returns>
        ApiResponse<TotalBalance> GetTotalBalanceWithHttpInfo (string currency = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Generate currency deposit address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>Task of DepositAddress</returns>
        Task<DepositAddress> GetDepositAddressAsync (string currency);

        /// <summary>
        /// Generate currency deposit address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>Task of ApiResponse (DepositAddress)</returns>
        Task<ApiResponse<DepositAddress>> GetDepositAddressAsyncWithHttpInfo (string currency);
        /// <summary>
        /// Retrieve withdrawal records
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of List&lt;LedgerRecord&gt;</returns>
        Task<List<LedgerRecord>> ListWithdrawalsAsync (string currency = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Retrieve withdrawal records
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;LedgerRecord&gt;)</returns>
        Task<ApiResponse<List<LedgerRecord>>> ListWithdrawalsAsyncWithHttpInfo (string currency = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Retrieve deposit records
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of List&lt;LedgerRecord&gt;</returns>
        Task<List<LedgerRecord>> ListDepositsAsync (string currency = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Retrieve deposit records
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;LedgerRecord&gt;)</returns>
        Task<ApiResponse<List<LedgerRecord>>> ListDepositsAsyncWithHttpInfo (string currency = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Transfer between trading accounts
        /// </summary>
        /// <remarks>
        /// Transfer between different accounts. Currently support transfers between the following:  1. spot - margin 2. spot - futures(perpetual) 3. spot - delivery 4. spot - cross margin
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transfer"></param>
        /// <returns>Task of void</returns>
        Task TransferAsync (Transfer transfer);

        /// <summary>
        /// Transfer between trading accounts
        /// </summary>
        /// <remarks>
        /// Transfer between different accounts. Currently support transfers between the following:  1. spot - margin 2. spot - futures(perpetual) 3. spot - delivery 4. spot - cross margin
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transfer"></param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> TransferAsyncWithHttpInfo (Transfer transfer);
        /// <summary>
        /// Retrieve transfer records between main and sub accounts
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days  &gt; Note: only records after 2020-04-10 can be retrieved
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">Sub account user ID. Return records related to all sub accounts if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of List&lt;SubAccountTransfer&gt;</returns>
        Task<List<SubAccountTransfer>> ListSubAccountTransfersAsync (string subUid = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Retrieve transfer records between main and sub accounts
        /// </summary>
        /// <remarks>
        /// Record time range cannot exceed 30 days  &gt; Note: only records after 2020-04-10 can be retrieved
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">Sub account user ID. Return records related to all sub accounts if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;SubAccountTransfer&gt;)</returns>
        Task<ApiResponse<List<SubAccountTransfer>>> ListSubAccountTransfersAsyncWithHttpInfo (string subUid = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Transfer between main and sub accounts
        /// </summary>
        /// <remarks>
        /// Support transferring with sub user&#39;s spot or futures account. Note that only main user&#39;s spot account is used no matter which sub user&#39;s account is operated.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountTransfer"></param>
        /// <returns>Task of void</returns>
        Task TransferWithSubAccountAsync (SubAccountTransfer subAccountTransfer);

        /// <summary>
        /// Transfer between main and sub accounts
        /// </summary>
        /// <remarks>
        /// Support transferring with sub user&#39;s spot or futures account. Note that only main user&#39;s spot account is used no matter which sub user&#39;s account is operated.
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountTransfer"></param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> TransferWithSubAccountAsyncWithHttpInfo (SubAccountTransfer subAccountTransfer);
        /// <summary>
        /// Retrieve withdrawal status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of List&lt;WithdrawStatus&gt;</returns>
        Task<List<WithdrawStatus>> ListWithdrawStatusAsync (string currency = default(string));

        /// <summary>
        /// Retrieve withdrawal status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WithdrawStatus&gt;)</returns>
        Task<ApiResponse<List<WithdrawStatus>>> ListWithdrawStatusAsyncWithHttpInfo (string currency = default(string));
        /// <summary>
        /// Retrieve sub account balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">Sub account user ID. Return records related to all sub accounts if not specified (optional)</param>
        /// <returns>Task of List&lt;SubAccountBalance&gt;</returns>
        Task<List<SubAccountBalance>> ListSubAccountBalancesAsync (string subUid = default(string));

        /// <summary>
        /// Retrieve sub account balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">Sub account user ID. Return records related to all sub accounts if not specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SubAccountBalance&gt;)</returns>
        Task<ApiResponse<List<SubAccountBalance>>> ListSubAccountBalancesAsyncWithHttpInfo (string subUid = default(string));
        /// <summary>
        /// Retrieve personal trading fee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <returns>Task of TradeFee</returns>
        Task<TradeFee> GetTradeFeeAsync (string currencyPair = default(string));

        /// <summary>
        /// Retrieve personal trading fee
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <returns>Task of ApiResponse (TradeFee)</returns>
        Task<ApiResponse<TradeFee>> GetTradeFeeAsyncWithHttpInfo (string currencyPair = default(string));
        /// <summary>
        /// Retrieve user&#39;s total balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency unit used to calculate the balance amount. BTC, CNY, USD and USDT are allowed. USDT is the default. (optional, default to &quot;USDT&quot;)</param>
        /// <returns>Task of TotalBalance</returns>
        Task<TotalBalance> GetTotalBalanceAsync (string currency = default(string));

        /// <summary>
        /// Retrieve user&#39;s total balances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency unit used to calculate the balance amount. BTC, CNY, USD and USDT are allowed. USDT is the default. (optional, default to &quot;USDT&quot;)</param>
        /// <returns>Task of ApiResponse (TotalBalance)</returns>
        Task<ApiResponse<TotalBalance>> GetTotalBalanceAsyncWithHttpInfo (string currency = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletApi : IWalletApiSync, IWalletApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WalletApi : IWalletApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WalletApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WalletApi(string basePath)
        {
            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WalletApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Gate.GateApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WalletApi(ISynchronousClient client,IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Gate.GateApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Generate currency deposit address 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>DepositAddress</returns>
        public DepositAddress GetDepositAddress (string currency)
        {
             ApiResponse<DepositAddress> localVarResponse = GetDepositAddressWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate currency deposit address 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>ApiResponse of DepositAddress</returns>
        public ApiResponse<DepositAddress> GetDepositAddressWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling WalletApi->GetDepositAddress");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<DepositAddress>("/wallet/deposit_address", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDepositAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate currency deposit address 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>Task of DepositAddress</returns>
        public async Task<DepositAddress> GetDepositAddressAsync (string currency)
        {
             Io.Gate.GateApi.Client.ApiResponse<DepositAddress> localVarResponse = await GetDepositAddressAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate currency deposit address 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency name</param>
        /// <returns>Task of ApiResponse (DepositAddress)</returns>
        public async Task<ApiResponse<DepositAddress>> GetDepositAddressAsyncWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling WalletApi->GetDepositAddress");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DepositAddress>("/wallet/deposit_address", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDepositAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve withdrawal records Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>List&lt;LedgerRecord&gt;</returns>
        public List<LedgerRecord> ListWithdrawals (string currency = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
             ApiResponse<List<LedgerRecord>> localVarResponse = ListWithdrawalsWithHttpInfo(currency, from, to, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve withdrawal records Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;LedgerRecord&gt;</returns>
        public ApiResponse<List<LedgerRecord>> ListWithdrawalsWithHttpInfo (string currency = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<LedgerRecord>>("/wallet/withdrawals", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWithdrawals", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve withdrawal records Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of List&lt;LedgerRecord&gt;</returns>
        public async Task<List<LedgerRecord>> ListWithdrawalsAsync (string currency = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<LedgerRecord>> localVarResponse = await ListWithdrawalsAsyncWithHttpInfo(currency, from, to, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve withdrawal records Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;LedgerRecord&gt;)</returns>
        public async Task<ApiResponse<List<LedgerRecord>>> ListWithdrawalsAsyncWithHttpInfo (string currency = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<LedgerRecord>>("/wallet/withdrawals", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWithdrawals", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve deposit records Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>List&lt;LedgerRecord&gt;</returns>
        public List<LedgerRecord> ListDeposits (string currency = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
             ApiResponse<List<LedgerRecord>> localVarResponse = ListDepositsWithHttpInfo(currency, from, to, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve deposit records Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;LedgerRecord&gt;</returns>
        public ApiResponse<List<LedgerRecord>> ListDepositsWithHttpInfo (string currency = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<LedgerRecord>>("/wallet/deposits", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeposits", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve deposit records Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of List&lt;LedgerRecord&gt;</returns>
        public async Task<List<LedgerRecord>> ListDepositsAsync (string currency = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<LedgerRecord>> localVarResponse = await ListDepositsAsyncWithHttpInfo(currency, from, to, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve deposit records Record time range cannot exceed 30 days
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Filter by currency. Return all currency records if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;LedgerRecord&gt;)</returns>
        public async Task<ApiResponse<List<LedgerRecord>>> ListDepositsAsyncWithHttpInfo (string currency = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<LedgerRecord>>("/wallet/deposits", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeposits", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer between trading accounts Transfer between different accounts. Currently support transfers between the following:  1. spot - margin 2. spot - futures(perpetual) 3. spot - delivery 4. spot - cross margin
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transfer"></param>
        /// <returns></returns>
        public void Transfer (Transfer transfer)
        {
             TransferWithHttpInfo(transfer);
        }

        /// <summary>
        /// Transfer between trading accounts Transfer between different accounts. Currently support transfers between the following:  1. spot - margin 2. spot - futures(perpetual) 3. spot - delivery 4. spot - cross margin
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transfer"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TransferWithHttpInfo (Transfer transfer)
        {
            // verify the required parameter 'transfer' is set
            if (transfer == null)
                throw new ApiException(400, "Missing required parameter 'transfer' when calling WalletApi->Transfer");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transfer;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/wallet/transfers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Transfer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer between trading accounts Transfer between different accounts. Currently support transfers between the following:  1. spot - margin 2. spot - futures(perpetual) 3. spot - delivery 4. spot - cross margin
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transfer"></param>
        /// <returns>Task of void</returns>
        public async Task TransferAsync (Transfer transfer)
        {
             await TransferAsyncWithHttpInfo(transfer);

        }

        /// <summary>
        /// Transfer between trading accounts Transfer between different accounts. Currently support transfers between the following:  1. spot - margin 2. spot - futures(perpetual) 3. spot - delivery 4. spot - cross margin
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transfer"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<Object>> TransferAsyncWithHttpInfo (Transfer transfer)
        {
            // verify the required parameter 'transfer' is set
            if (transfer == null)
                throw new ApiException(400, "Missing required parameter 'transfer' when calling WalletApi->Transfer");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = transfer;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/wallet/transfers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Transfer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve transfer records between main and sub accounts Record time range cannot exceed 30 days  &gt; Note: only records after 2020-04-10 can be retrieved
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">Sub account user ID. Return records related to all sub accounts if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>List&lt;SubAccountTransfer&gt;</returns>
        public List<SubAccountTransfer> ListSubAccountTransfers (string subUid = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
             ApiResponse<List<SubAccountTransfer>> localVarResponse = ListSubAccountTransfersWithHttpInfo(subUid, from, to, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve transfer records between main and sub accounts Record time range cannot exceed 30 days  &gt; Note: only records after 2020-04-10 can be retrieved
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">Sub account user ID. Return records related to all sub accounts if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;SubAccountTransfer&gt;</returns>
        public ApiResponse<List<SubAccountTransfer>> ListSubAccountTransfersWithHttpInfo (string subUid = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (subUid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sub_uid", subUid));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SubAccountTransfer>>("/wallet/sub_account_transfers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubAccountTransfers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve transfer records between main and sub accounts Record time range cannot exceed 30 days  &gt; Note: only records after 2020-04-10 can be retrieved
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">Sub account user ID. Return records related to all sub accounts if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of List&lt;SubAccountTransfer&gt;</returns>
        public async Task<List<SubAccountTransfer>> ListSubAccountTransfersAsync (string subUid = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<SubAccountTransfer>> localVarResponse = await ListSubAccountTransfersAsyncWithHttpInfo(subUid, from, to, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve transfer records between main and sub accounts Record time range cannot exceed 30 days  &gt; Note: only records after 2020-04-10 can be retrieved
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">Sub account user ID. Return records related to all sub accounts if not specified (optional)</param>
        /// <param name="from">Time range beginning, default to 7 days before current time (optional)</param>
        /// <param name="to">Time range ending, default to current time (optional)</param>
        /// <param name="limit">Maximum number of records to be returned in a single list (optional, default to 100)</param>
        /// <param name="offset">List offset, starting from 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;SubAccountTransfer&gt;)</returns>
        public async Task<ApiResponse<List<SubAccountTransfer>>> ListSubAccountTransfersAsyncWithHttpInfo (string subUid = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?), int? offset = default(int?))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (subUid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sub_uid", subUid));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SubAccountTransfer>>("/wallet/sub_account_transfers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubAccountTransfers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer between main and sub accounts Support transferring with sub user&#39;s spot or futures account. Note that only main user&#39;s spot account is used no matter which sub user&#39;s account is operated.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountTransfer"></param>
        /// <returns></returns>
        public void TransferWithSubAccount (SubAccountTransfer subAccountTransfer)
        {
             TransferWithSubAccountWithHttpInfo(subAccountTransfer);
        }

        /// <summary>
        /// Transfer between main and sub accounts Support transferring with sub user&#39;s spot or futures account. Note that only main user&#39;s spot account is used no matter which sub user&#39;s account is operated.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountTransfer"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TransferWithSubAccountWithHttpInfo (SubAccountTransfer subAccountTransfer)
        {
            // verify the required parameter 'subAccountTransfer' is set
            if (subAccountTransfer == null)
                throw new ApiException(400, "Missing required parameter 'subAccountTransfer' when calling WalletApi->TransferWithSubAccount");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = {
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = subAccountTransfer;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/wallet/sub_account_transfers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferWithSubAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer between main and sub accounts Support transferring with sub user&#39;s spot or futures account. Note that only main user&#39;s spot account is used no matter which sub user&#39;s account is operated.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountTransfer"></param>
        /// <returns>Task of void</returns>
        public async Task TransferWithSubAccountAsync (SubAccountTransfer subAccountTransfer)
        {
             await TransferWithSubAccountAsyncWithHttpInfo(subAccountTransfer);

        }

        /// <summary>
        /// Transfer between main and sub accounts Support transferring with sub user&#39;s spot or futures account. Note that only main user&#39;s spot account is used no matter which sub user&#39;s account is operated.
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subAccountTransfer"></param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<Object>> TransferWithSubAccountAsyncWithHttpInfo (SubAccountTransfer subAccountTransfer)
        {
            // verify the required parameter 'subAccountTransfer' is set
            if (subAccountTransfer == null)
                throw new ApiException(400, "Missing required parameter 'subAccountTransfer' when calling WalletApi->TransferWithSubAccount");


            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            localVarRequestOptions.Data = subAccountTransfer;

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/wallet/sub_account_transfers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferWithSubAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve withdrawal status 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>List&lt;WithdrawStatus&gt;</returns>
        public List<WithdrawStatus> ListWithdrawStatus (string currency = default(string))
        {
             ApiResponse<List<WithdrawStatus>> localVarResponse = ListWithdrawStatusWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve withdrawal status 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>ApiResponse of List&lt;WithdrawStatus&gt;</returns>
        public ApiResponse<List<WithdrawStatus>> ListWithdrawStatusWithHttpInfo (string currency = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<WithdrawStatus>>("/wallet/withdraw_status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWithdrawStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve withdrawal status 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of List&lt;WithdrawStatus&gt;</returns>
        public async Task<List<WithdrawStatus>> ListWithdrawStatusAsync (string currency = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<WithdrawStatus>> localVarResponse = await ListWithdrawStatusAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve withdrawal status 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Retrieve data of the specified currency (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WithdrawStatus&gt;)</returns>
        public async Task<ApiResponse<List<WithdrawStatus>>> ListWithdrawStatusAsyncWithHttpInfo (string currency = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<WithdrawStatus>>("/wallet/withdraw_status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWithdrawStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve sub account balances 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">Sub account user ID. Return records related to all sub accounts if not specified (optional)</param>
        /// <returns>List&lt;SubAccountBalance&gt;</returns>
        public List<SubAccountBalance> ListSubAccountBalances (string subUid = default(string))
        {
             ApiResponse<List<SubAccountBalance>> localVarResponse = ListSubAccountBalancesWithHttpInfo(subUid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve sub account balances 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">Sub account user ID. Return records related to all sub accounts if not specified (optional)</param>
        /// <returns>ApiResponse of List&lt;SubAccountBalance&gt;</returns>
        public ApiResponse<List<SubAccountBalance>> ListSubAccountBalancesWithHttpInfo (string subUid = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (subUid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sub_uid", subUid));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SubAccountBalance>>("/wallet/sub_account_balances", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubAccountBalances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve sub account balances 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">Sub account user ID. Return records related to all sub accounts if not specified (optional)</param>
        /// <returns>Task of List&lt;SubAccountBalance&gt;</returns>
        public async Task<List<SubAccountBalance>> ListSubAccountBalancesAsync (string subUid = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<List<SubAccountBalance>> localVarResponse = await ListSubAccountBalancesAsyncWithHttpInfo(subUid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve sub account balances 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subUid">Sub account user ID. Return records related to all sub accounts if not specified (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SubAccountBalance&gt;)</returns>
        public async Task<ApiResponse<List<SubAccountBalance>>> ListSubAccountBalancesAsyncWithHttpInfo (string subUid = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (subUid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sub_uid", subUid));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SubAccountBalance>>("/wallet/sub_account_balances", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubAccountBalances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve personal trading fee 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <returns>TradeFee</returns>
        public TradeFee GetTradeFee (string currencyPair = default(string))
        {
             ApiResponse<TradeFee> localVarResponse = GetTradeFeeWithHttpInfo(currencyPair);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve personal trading fee 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <returns>ApiResponse of TradeFee</returns>
        public ApiResponse<TradeFee> GetTradeFeeWithHttpInfo (string currencyPair = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<TradeFee>("/wallet/fee", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTradeFee", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve personal trading fee 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <returns>Task of TradeFee</returns>
        public async Task<TradeFee> GetTradeFeeAsync (string currencyPair = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<TradeFee> localVarResponse = await GetTradeFeeAsyncWithHttpInfo(currencyPair);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve personal trading fee 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyPair">Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)</param>
        /// <returns>Task of ApiResponse (TradeFee)</returns>
        public async Task<ApiResponse<TradeFee>> GetTradeFeeAsyncWithHttpInfo (string currencyPair = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currencyPair != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency_pair", currencyPair));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TradeFee>("/wallet/fee", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTradeFee", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve user&#39;s total balances 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency unit used to calculate the balance amount. BTC, CNY, USD and USDT are allowed. USDT is the default. (optional, default to &quot;USDT&quot;)</param>
        /// <returns>TotalBalance</returns>
        public TotalBalance GetTotalBalance (string currency = default(string))
        {
             ApiResponse<TotalBalance> localVarResponse = GetTotalBalanceWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve user&#39;s total balances 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency unit used to calculate the balance amount. BTC, CNY, USD and USDT are allowed. USDT is the default. (optional, default to &quot;USDT&quot;)</param>
        /// <returns>ApiResponse of TotalBalance</returns>
        public ApiResponse<TotalBalance> GetTotalBalanceWithHttpInfo (string currency = default(string))
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = {
            };

            // to determine the Accept header
            string[] _accepts = {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request
            var localVarResponse = this.Client.Get<TotalBalance>("/wallet/total_balance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTotalBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve user&#39;s total balances 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency unit used to calculate the balance amount. BTC, CNY, USD and USDT are allowed. USDT is the default. (optional, default to &quot;USDT&quot;)</param>
        /// <returns>Task of TotalBalance</returns>
        public async Task<TotalBalance> GetTotalBalanceAsync (string currency = default(string))
        {
             Io.Gate.GateApi.Client.ApiResponse<TotalBalance> localVarResponse = await GetTotalBalanceAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve user&#39;s total balances 
        /// </summary>
        /// <exception cref="Io.Gate.GateApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">Currency unit used to calculate the balance amount. BTC, CNY, USD and USDT are allowed. USDT is the default. (optional, default to &quot;USDT&quot;)</param>
        /// <returns>Task of ApiResponse (TotalBalance)</returns>
        public async Task<ApiResponse<TotalBalance>> GetTotalBalanceAsyncWithHttpInfo (string currency = default(string))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (apiv4) required
            localVarRequestOptions.RequireApiV4Auth = true;

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TotalBalance>("/wallet/total_balance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTotalBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
